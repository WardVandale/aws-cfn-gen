---
# TODO: If tags are passed check their validity

- name: Create a complete Application Environment on AWS
  hosts: localhost
  gather_facts: false

  environment:
    AWS_REGION: "{{ target_account.region | default('eu-central-1') }}"

  pre_tasks:
    - name: Pre-tasks block
      block:
        - name: Test AWS_REGION
          shell: "[[ -n $AWS_REGION ]]"
          register: region
          failed_when: false
          changed_when: false
        - name: Test AWS_SECRET_ACCESS_KEY
          shell: "[[ -n $AWS_SECRET_ACCESS_KEY ]]"
          register: secret
          failed_when: false
          changed_when: false
        - name: Test AWS_ACCESS_KEY_ID
          shell: "[[ -n $AWS_ACCESS_KEY_ID ]]"
          register: key
          failed_when: false
          changed_when: false
        - name: Test AWS_SESSION_TOKEN
          shell: "[[ -n $AWS_SESSION_TOKEN ]]"
          register: token
          failed_when: false
          changed_when: false
        - name: Test if config file exists
          stat:
            path: "{{ configfile }}"
          register: configfilestat
          failed_when: false
          changed_when: false
        - name: Do assertions on configfile and AWS credential envvars
          assert:
            that:
              - "configfile is defined"
              - "key.rc == 0"
              - "secret.rc == 0"
              - "region.rc == 0"
              - "token.rc == 0"
              - "configfilestat.stat.exists"
        - name: Disable all alarms during playbook execution
          shell: |
            aws cloudwatch disable-alarm-actions --alarm-names $(aws cloudwatch describe-alarms --query "MetricAlarms[*].AlarmName" --output text)
        - name: Create S3 bucket to hold CloudFormation templates
          shell: |
            if ! aws s3 ls | grep "{{ project.name }}-cfn-templates"
            then
              aws s3 mb "s3://{{ project.name }}-cfn-templates"
            fi
            aws s3api put-bucket-encryption \
              --bucket {{ project.name }}-cfn-templates \
              --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
            aws s3api put-public-access-block \
              --bucket {{ project.name }}-cfn-templates \
              --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"

      tags: [ 'always' ]

  post_tasks:
    - name: Post-tasks block
      block:
        - name: Enable all alarms after playbook execution
          shell: |
            aws cloudwatch enable-alarm-actions --alarm-names $(aws cloudwatch describe-alarms --query "MetricAlarms[*].AlarmName" --output text)
        - name: Report on created changesets
          shell: |
            cat changeset_report.txt | tr '\t' ' '
          register: changeset
          when: "create_changeset == 'yes'"
        - name: Dump changeset report
          debug:
            var: changeset.stdout_lines
          when: "create_changeset == 'yes'"

      tags: [ 'always' ]

  vars_files:
    - "vars/bitbucket.yml"
    - "vars/alb_hosted_zone_id.yml"
    - "{{ configfile }}"

  tasks:
    - name: Set all stack_deletion_order variables
      set_fact:
        stack_deletion_order_dynamodb:           "{% if env == 'prd' %}0{% else %}{{ (stack_deletion_order | default({})).dynamodb           | default(0)  }}{% endif %}"
        stack_deletion_order_vpc:                "{% if env == 'prd' %}0{% else %}{{ (stack_deletion_order | default({})).vpc                | default(0)  }}{% endif %}"
        stack_deletion_order_vpcendpoints:       "{% if env == 'prd' %}0{% else %}{{ (stack_deletion_order | default({})).vpcendpoints       | default(0)  }}{% endif %}"
        stack_deletion_order_cloudfront:         "{% if env == 'prd' %}0{% else %}{{ (stack_deletion_order | default({})).cloudfront         | default(0)  }}{% endif %}"
        stack_deletion_order_rdsparametergroups: "{% if env == 'prd' %}0{% else %}{{ (stack_deletion_order | default({})).rdsparametergroups | default(0)  }}{% endif %}"
        stack_deletion_order_bastionhost:        "{% if env == 'prd' %}0{% else %}{{ (stack_deletion_order | default({})).bastionhost        | default(10) }}{% endif %}"
        stack_deletion_order_ecs:                "{% if env == 'prd' %}0{% else %}{{ (stack_deletion_order | default({})).ecs                | default(10) }}{% endif %}"
        stack_deletion_order_ecs2:               "{% if env == 'prd' %}0{% else %}{{ (stack_deletion_order | default({})).ecs2               | default(10) }}{% endif %}"
        stack_deletion_order_route53:            "{% if env == 'prd' %}0{% else %}{{ (stack_deletion_order | default({})).route53            | default(20) }}{% endif %}"
        stack_deletion_order_alb:                "{% if env == 'prd' %}0{% else %}{{ (stack_deletion_order | default({})).alb                | default(30) }}{% endif %}"
      tags: [ 'always' ]

    - name: Set all cfn-lint checks to ignore
      set_fact:
        cfn_lint_ignore_list: "E3012,W1001,W3005,E1029"
      tags: [ 'always' ]

    - name: Dump Stack Deletion facts
      block:
        - debug:
            var: stack_deletion_order_bastionhost
        - debug:
            var: stack_deletion_order_route53
        - debug:
            var: stack_deletion_order_ecs
        - debug:
            var: stack_deletion_order_alb
        - debug:
            var: stack_deletion_order_dynamodb
        - debug:
            var: stack_deletion_order_vpc
      tags: [ 'always' ]

    - name: "Default (empty) value for cw"
      set_fact:
        cw: "yes"
      when: "cw is not defined"
      tags: [ 'always' ]

    - name: Get timestamp
      shell: "date +%Y%m%d%H%M%S"
      register: timestamp
      tags: [ 'always' ]

    - name: Set changeset variables
      set_fact:
        create_changeset: "{% if create_changeset is not defined %}no{% else %}{{ create_changeset }}{% endif %}"
        changeset_suffix: "{{ timestamp.stdout }}"
      tags: [ 'always' ]

    - name: Dump changeset settings
      debug:
        var: create_changeset
      tags: [ 'always' ]
    - name: Dump changeset settings
      debug:
        var: changeset_suffix
      tags: [ 'always' ]

    - name: Get aws-cfn-gen tag using git describe --tags
      shell: |
        git describe --tags
      register: git_tag
      tags: [ 'always' ]
    - name: Facts block
      block:
        - name: Convert project name to alpha numeric camel case
          set_fact:
            cfn_project: "{{ project.name | replace('-', ' ') | replace('.', ' ') | title | replace(' ', '') }}"
        - set_fact:
            project: "{{ project.name }}"
            shortproject: "{{ project.shortname | default(project.name) }}"
            gittag: "{{ git_tag.stdout | default('NA') }}"
      tags: [ 'always' ]

    - name: VPC
      block:
        - name: Create CFN template from Ansible template for the VPC
          template:
            src: "VPC.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-vpc.yml"
        - name: Check generated VPC CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-vpc.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-vpc.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-vpc.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-vpc.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the VPC CloudFormation stack
          cloudformation:
            stack_name: "{{ vpc.stackname }}"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ vpc.stackname }}{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
              stack_deletion_order:  "{{ stack_deletion_order_vpc }}"
              ass:cfn:deletion-order:  "{{ stack_deletion_order_vpc }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ vpc.stackname }}" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ vpc.stackname }}{{ changeset_suffix }} \
                --stack-name={{ vpc.stackname }} --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]

      tags: [ 'vpc' ]
      when: "vpc is defined"

    ### Collect info from other stacks
    ### Should remain after the VPC creation
    - name: Block for VPC
      block:
        - name: Get facts for the VPC stack
          cloudformation_facts:
            stack_name: "{{ referenced_stacks.VPCStackName }}"
          register: vpcfacts
          tags: [ 'always' ]

        - name: Dump vpcfacts
          debug:
            var: vpcfacts
          tags: [ 'always' ]

        - name: Set more variables
          set_fact:
            iam_stackname: "{{ cfn_project }}IAM"
            vpc_id: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.VPC | default('NA') }}"
            vpc_privatesubnet_routetable: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.RouteTablePrivateSubnet }}"
            vpc_publicsubnet_routetable: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.RouteTablePublicSubnet }}"
            vpc_sg_app: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.SGAPP }}"
            vpc_sg_elb: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.SGELB }}"
            vpc_sg_dmz: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.SGDMZ }}"
            vpc_sg_rds: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.SGRDS }}"
            vpc_privatesubnet_az1: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.PrivateSubnetAZ1 }}"
            vpc_privatesubnet_az2: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.PrivateSubnetAZ2 }}"
            vpc_elbsubnet_az1: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.ELBSubnetAZ1 }}"
            vpc_elbsubnet_az2: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.ELBSubnetAZ2 }}"
            vpc_rdssubnet_az1: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.RDSSubnetAZ1 }}"
            vpc_rdssubnet_az2: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.RDSSubnetAZ2 }}"
            vpc_publicsubnet: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.SubnetPublic }}"
            vpc_nr_of_azs: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.AZs }}"

          tags: [ 'always' ]

        - name: Set more variables
          set_fact:
            vpc_privatesubnet_az3: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.PrivateSubnetAZ3 }}"
            vpc_elbsubnet_az3: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.ELBSubnetAZ3 }}"
            vpc_rdssubnet_az3: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.RDSSubnetAZ3 }}"

          tags: [ 'always' ]
          when: "vpc_nr_of_azs is defined and vpc_nr_of_azs == '3'"

        - name: VPCEndPoint
          block:
            - name: Create CFN template from Ansible template for the VPCEndPoints
              template:
                src: "VPCEndpoint.yml"
                dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-vpcendpoint.yml"
            - name: Check generated VPCEndPoint CloudFormation file against linter.
              shell: |
                cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-vpcendpoint.yml"
            - name: Put CFN template on s3
              shell: |
                aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-vpcendpoint.yml" \
                          "s3://{{ project }}-cfn-templates/cfn-{{ project }}-vpcendpoint.yml"
              tags: [ 'deploy' ]
            - name: Get presigned URL for the template on S3
              shell: |
                aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-vpcendpoint.yml"
              register: presign
              tags: [ 'deploy' ]
            - name: Create or Update the VPC Endpoints CloudFormation stack
              cloudformation:
                stack_name: "{{ cfn_project }}VPCEndpoint"
                create_changeset: "{{ create_changeset }}"
                changeset_name: "{{ cfn_project }}VPCEndpoint{{ changeset_suffix }}"
                state: "present"
                disable_rollback: false
                template_url: "{{ presign.stdout }}"
                tags:
                  aws_cfn_gen_tag: "{{ gittag }}"
                  stack_deletion_order:  "{{ stack_deletion_order_vpcendpoints }}"
                  ass:cfn:deletion-order:  "{{ stack_deletion_order_vpcendpoints }}"
              tags: [ 'deploy' ]
            - name: Add result of changeset to a local file
              shell: |
                echo "{{ cfn_project }}VPCEndpoint" >> changeset_report.txt
                aws cloudformation describe-change-set \
                    --change-set-name={{ cfn_project }}VPCEndpoint{{ changeset_suffix }} \
                    --stack-name={{ cfn_project }}VPCEndpoint --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                    --output text >> changeset_report.txt
              when: "create_changeset is defined and create_changeset == 'yes'"
              tags: [ 'deploy' ]
          tags: [ 'vpc_endpoints', 'vpc' ]
          when: "vpc is defined"

      when: "referenced_stacks is defined and referenced_stacks.VPCStackName is defined"

    - name: SGRules
      block:
        - name: Create CFN template from Ansible template for Security Group Rules
          template:
            src: "SGRules.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-sgrules.yml"
        - name: Check generated Security Group Rule CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-sgrules.yml"
        - name: Put CFN template for SGRules on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-sgrules.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-sgrules.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the SGRules template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-sgrules.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the SGRules CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}SGRules"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}SGRules{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}SGRules" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}SGRules{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}SGRules --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]
      tags: [ 'sgrules' ]
      when: "sgrules is defined"

    - name: KMS
      block:
        - name: Create CFN template from Ansible template for KMS
          template:
            src: "KMS.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-kms.yml"
        - name: Check generated KMS CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-kms.yml"
        - name: Put CFN template for KMS on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-kms.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-kms.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the KMS template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-kms.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the KMS CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}KMS"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}KMS{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}KMS" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}KMS{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}KMS --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]
      tags: [ 'kms' ]
      when: "kms is defined"

    - name: SecretsManager
      block:
        - name: Create CFN template from Ansible template for SecretsManager
          template:
            src: "SecretsManager.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-secretsmanager.yml"
        - name: Check generated SecretsManager CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-secretsmanager.yml"
        - name: Put CFN template for SecretsManager on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-secretsmanager.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-secretsmanager.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the SecretsManager template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-secretsmanager.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the SecretsManager CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}SecretsManager"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}SecretsManager{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}SecretsManager" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}SecretsManager{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}SecretsManager --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]
      tags: [ 'secrets_manager' ]
      when: "secrets_manager is defined"

    - name: RDSParameterGroups
      block:
        - name: Create CFN template from Ansible template for the RDSParameterGroups
          template:
            src: "RDSParameterGroups.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-rdsparametergroups.yml"
        - name: Check generated RDSParameterGroups CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-rdsparametergroups.yml"
        - name: Put CFN template for RDSParameterGroups on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-rdsparametergroups.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-rdsparametergroups.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the RDSParameterGroups template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-rdsparametergroups.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the RDSParameterGroups CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}RDSParameterGroups"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}RDSParameterGroups{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
              stack_deletion_order:  "{{ stack_deletion_order_rdsparametergroups }}"
              ass:cfn:deletion-order:  "{{ stack_deletion_order_rdsparametergroups }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}RDSParameterGroups" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}RDSParameterGroups{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}RDSParameterGroups --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]
      tags: [ 'rdsparametergroups', 'rds' ]
      when: "rds_parameter_groups is defined or rds_cluster_parameter_groups is defined"

    - name: RDS
      block:
        - name: Create template from Ansible template for the RDS Database Instances
          template:
            src: "RDS.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-rds-{{ item.db_instance_id }}.yml"
          with_items: "{{ rds | default([]) }}"
        - name: Check generated RDS Database CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-rds-{{ item.db_instance_id }}.yml"
        - name: Put CFN template for RDS on s3
          shell: |
            aws s3 cp \
               "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-rds-{{ item.db_instance_id }}.yml" \
               "s3://{{ project }}-cfn-templates/cfn-{{ project }}-rds-{{ item.db_instance_id }}.yml"
          with_items: "{{ rds | default([]) }}"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the RDS template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-rds-{{ item.db_instance_id }}.yml"
          with_items: "{{ rds | default([]) }}"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the RDS CloudFormation stacks
          cloudformation:
            stack_name: "{{ cfn_project }}RDS{{ item.item.db_instance_id }}"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}RDS{{ item.item.db_instance_id }}{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ item.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
          with_items: "{{ presign.results }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}RDS{{ item.item.db_instance_id }}" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}RDS{{ item.item.db_instance_id }}{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}RDS{{ item.item.db_instance_id }} --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]

      tags: [ 'rds' ]
      when: "rds is defined"

    - name: ChatNotifications
      block:
        - name: Create CFN template from Ansible template for ChatNotifications
          template:
            src: "ChatNotifications.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-chatnotifications.yml"
        - name: Check generated ChatNotifications CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-chatnotifications.yml"
        - name: Put CFN template for ChatNotification on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-chatnotifications.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-chatnotifications.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the ChatNotifications template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-chatnotifications.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the ChatNotifications CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}ChatNotifications"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}ChatNotifications{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}ChatNotifications" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}ChatNotifications{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}ChatNotifications --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]
      tags: [ 'chat_notifications' ]
      when: "chat_notifications is defined"

    - name: Bastion
      block:
        - name: Create CFN template from Ansible template for the Bastion Host
          template:
            src: "BastionHost.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-bastionhost.yml"
        - name: Check generated Bastion CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-bastionhost.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-bastionhost.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-bastionhost.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-bastionhost.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the BastionHost CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}Bastion"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}Bastion{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
              stack_deletion_order: "{{ stack_deletion_order_bastionhost }}"
              ass:cfn:deletion-order: "{{ stack_deletion_order_bastionhost }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}Bastion" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}Bastion{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}Bastion --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]
      when: "bastion is defined"
      tags: [ 'bastion' ]

    - name: ECR
      block:
        - name: Create CFN template from Ansible template for the ECR Repositories
          template:
            src: "ECR.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecr.yml"
        - name: Check generated ECR CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecr.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecr.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-ecr.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-ecr.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the ECR CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}ECR"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}ECR{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}ECR" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}ECR{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}ECR --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]
      when: "ecr is defined"
      tags: [ 'ecr' ]

    - name: ECSMgmt
      block:
        - name: Create CFN template from Ansible template for ECSMgmt
          template:
            src: "ECSMgmt.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecsmgmt.yml"
        - name: Check generated ECSMgmt CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecsmgmt.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecsmgmt.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-ecsmgmt.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-ecsmgmt.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the ECSMgmt CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}ECSMgmt"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}ECSMgmt{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}ECSMgmt" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}ECSMgmt{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}ECSMgmt --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]
      when: "ecsmgmt is defined"
      tags: [ 'ecsmgmt' ]

    - name: Route53Delegation
      block:
        - name: Create template from Ansible template for Route53 Delegation
          template:
            src: "Route53Delegation.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-route53delegation-{{ item.hostedzone.id }}.yml"
          with_items: "{{ route53_delegation | default([]) }}"
        - name: Put CFN template for Route53 Delegation on s3
          shell: |
            aws s3 cp \
               "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-route53delegation-{{ item.hostedzone.id }}.yml" \
               "s3://{{ project }}-cfn-templates/cfn-{{ project }}-route53delegation-{{ item.hostedzone.id }}.yml"
          with_items: "{{ route53_delegation | default([]) }}"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the Route53 Delegation template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-route53delegation-{{ item.hostedzone.id }}.yml"
          with_items: "{{ route53_delegation | default([]) }}"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the Route53 Delegation CloudFormation stacks
          cloudformation:
            stack_name: "route53-delegation-tooling-{{ item.item.hostedzone.domain | replace('.', '-') }}"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "route53-delegation-tooling-{{ item.item.hostedzone.domain | replace('.', '-') }}{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ item.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
          with_items: "{{ presign.results }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "route53-delegation-tooling-{{ item.item.hostedzone.domain | replace('.', '-') }}" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name=route53-delegation-tooling-{{ item.item.hostedzone.domain | replace('.', '-') }}{{ changeset_suffix }} \
                --stack-name=route53-delegation-tooling-{{ item.item.hostedzone.domain | replace('.', '-') }} --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          with_items: "{{ presign.results }}"
          tags: [ 'deploy' ]
      tags: [ 'route53delegation' ]

    - name: IAM
      block:
        - name: Create CFN template from Ansible template for the IAM resources
          template:
            src: "IAM.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-iam.yml"
        - name: Check generated IAM CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-iam.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-iam.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-iam.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-iam.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the IAM Stack
          cloudformation:
            stack_name: "{{ cfn_project }}IAM"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}IAM{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}IAM" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}IAM{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}IAM --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]

      when: "awsroles is defined or managed_policies is defined"
      tags: [ 'iam' ]

    - name: Lambda
      block:
        - name: Get unique version_id to name the Lambda version resource
          shell: openssl rand -hex 12
          register: openssl
        - name: Save version_id
          set_fact:
            version_id: "{{ openssl.stdout }}"
        - name: Create CFN template from Ansible template for the Lambda functions
          template:
            src: "Lambda.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-lambda.yml"
        - name: Check generated Lambda CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-lambda.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-lambda.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-lambda.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-lambda.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the Lambda CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}Lambda"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}Lambda{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}Lambda" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}Lambda{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}Lambda --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]
      when: "lambda_functions is defined"
      tags: [ 'lambda' ]

    - name: LambdaCloudfront
      block:
        - name: Get unique version_id to name the Lambda version resource
          shell: openssl rand -hex 12
          register: openssl
        - name: Save version_id
          set_fact:
            version_id: "{{ openssl.stdout }}"
        - name: Create CFN template from Ansible template for the Lambda functions in us-east-1
          template:
            src: "LambdaCloudfront.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-lambdacloudfront.yml"
        - name: Check generated Lambda Cloudfront CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-lambdacloudfront.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-lambdacloudfront.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-lambdacloudfront.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-lambdacloudfront.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the Lambda CloudFormation stack
          cloudformation:
            region: us-east-1
            stack_name: "{{ cfn_project }}LambdaCloudfront"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}LambdaCloudfront{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}LambdaCloudfront" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}LambdaCloudfront{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}LambdaCloudfront --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]
      when: "lambda_functions_cloudfront is defined"
      tags: [ 'lambdacloudfront' ]

    - name: CloudWatch
      block:
        - name: Create CFN template from Ansible template for CloudWatch resources
          template:
            src: "CW.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-cw.yml"
        - name: Check generated CloudWatch CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-cw.yml"
        - name: Put CloudWatch CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-cw.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-cw.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the CloudWatch template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-cw.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the CloudWatch CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}CW"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}CW{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}CW" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}CW{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}CW --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]

      tags: [ 'cw' ]

    - name: EFS
      block:
        - name: Create CFN template from Ansible template for the EFS Filesystems
          template:
            src: "EFS.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-efs.yml"
        - name: Check generated EFS CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-efs.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-efs.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-efs.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-efs.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the EFS CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}EFS"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}EFS{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}EFS" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}EFS{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}EFS --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]

      when: "efs is defined"
      tags: [ 'efs' ]

    - name: DynamoDB
      block:
        - name: Create CFN template from Ansible template for DynamoDB tables
          template:
            src: "DynamoDB.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-dynamodb.yml"
        - name: Check generated DynamoDB CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-dynamodb.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-dynamodb.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-dynamodb.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-dynamodb.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the DynamoDB CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}DynamoDB"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}DynamoDB{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              stack_deletion_order:  "{{ stack_deletion_order_dynamodb }}"
              ass:cfn:deletion-order:  "{{ stack_deletion_order_dynamodb }}"
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}DynamoDB" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}DynamoDB{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}DynamoDB --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]

      when: "dynamodb is defined"
      tags: [ 'dynamodb' ]

    - name: Loadbalancers
      block:
        - name: Create template from Ansible template for the LoadBalancers
          template:
            src: "ALB.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-alb-{{ item.name }}.yml"
          with_items: "{{ loadbalancers | default([]) }}"
        - name: Check generated LoadBalancers CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-alb-{{ item.name }}.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp \
               "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-alb-{{ item.name }}.yml" \
               "s3://{{ project }}-cfn-templates/cfn-{{ project }}-alb-{{ item.name }}.yml"
          with_items: "{{ loadbalancers | default([]) }}"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-alb-{{ item.name }}.yml"
          with_items: "{{ loadbalancers | default([]) }}"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the Elastic LoadBalancer CloudFormation stacks
          cloudformation:
            stack_name: "{{ cfn_project }}LB{{ item.item.name }}"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}LB{{ item.item.name }}{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ item.stdout }}"
            tags:
              stack_deletion_order: "{{ stack_deletion_order_alb }}"
              ass:cfn:deletion-order: "{{ stack_deletion_order_alb }}"
              aws_cfn_gen_tag: "{{ gittag }}"
          with_items: "{{ presign.results }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}LB{{ item.item.name }}" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}LB{{ item.item.name }}{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}LB{{ item.item.name }} --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          with_items: "{{ presign.results }}"
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]

      tags: [ 'ecs', 'alb' ]

    - name: SNS
      block:
      - name: Create CFN template from Ansible template for the SNS Topics
        template:
          src: "SNS.yml"
          dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-sns.yml"
      - name: Check generated SNS CloudFormation file against linter.
        shell: |
          cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-sns.yml"
      - name: Put SNS CFN template on s3
        shell: |
          aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-sns.yml" \
                    "s3://{{ project }}-cfn-templates/cfn-{{ project }}-sns.yml"
        tags: [ 'deploy' ]
      - name: Get presigned URL for the SNS template on S3
        shell: |
          aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-sns.yml"
        register: presign
        tags: [ 'deploy' ]
      - name: Create or Update the SNS CloudFormation stack
        cloudformation:
          stack_name: "{{ cfn_project }}SNS"
          create_changeset: "{{ create_changeset }}"
          changeset_name: "{{ cfn_project }}SNS{{ changeset_suffix }}"
          state: "present"
          disable_rollback: false
          template_url: "{{ presign.stdout }}"
          tags:
            aws_cfn_gen_tag: "{{ gittag }}"
        tags: [ 'deploy' ]
      - name: Add result of changeset to a local file
        shell: |
          echo "{{ cfn_project }}SNS" >> changeset_report.txt
          aws cloudformation describe-change-set \
              --change-set-name={{ cfn_project }}SNS{{ changeset_suffix }} \
              --stack-name={{ cfn_project }}SNS --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
              --output text >> changeset_report.txt
        when: "create_changeset is defined and create_changeset == 'yes'"
        tags: [ 'deploy' ]

      when: "sns is defined"
      tags: [ 'sns' ]

    - name: S3 buckets
      block:
        - name: Create CFN template from Ansible template for project S3 buckets
          template:
            src: S3.yml
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-s3.yml"
        - name: Check generated S3 CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-s3.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-s3.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-s3.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-s3.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the S3 CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}S3"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}S3{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}S3" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}S3{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}S3 --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]

      when: "s3 is defined"
      tags: [ 's3' ]

    - name: CloudFront
      block:
        - name: Create CFN template from Ansible template for the CloudFront CDNs
          template:
            src: "CloudFront.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-cloudfront.yml"
        - name: Check generated CloudFront CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-cloudfront.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-cloudfront.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-cloudfront.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-cloudfront.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the CloudFront CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}CloudFront"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}CloudFront{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
              stack_deletion_order: "{{ stack_deletion_order_cloudfront }}"
              ass:cfn:deletion-order: "{{ stack_deletion_order_cloudfront }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}CloudFront" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}CloudFront{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}CloudFront --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]

      when: "cloudfront_distributions is defined"
      tags: [ 'cloudfront' ]

    - name: Route 53
      block:
        - name: Create template from Ansible template for the Route53 Hosted Zones
          template:
            src: "Route53.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-route53.yml"
        - name: Check generated Route53 Hosted Zones CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-route53.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-route53.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-route53.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-route53.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the Route53 Hosted Zones CloudFormation stacks
          cloudformation:
            stack_name: "{{ cfn_project }}Route53"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}Route53{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              stack_deletion_order:  "{{ stack_deletion_order_route53 }}"
              ass:cfn:deletion-order:  "{{ stack_deletion_order_route53 }}"
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}Route53" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}Route53{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}Route53 --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]

      when: "route53 is defined and route53.private_hosted_zones is defined"
      tags: [ 'createstack', 'route53', 'ecs', 'ecs2' ]

    - name: ECS Cluster
      block:
        - name: Create CFN template from Ansible template for the ECS Cluster
          template:
            src: ECS.yml
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecs.yml"
        - name: Check generated ECS Cluster CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecs.yml"
        - name: Put CFN template for ECS on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecs.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-ecs.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for ECS the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-ecs.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the ECS CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}ECS"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}ECS{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              stack_deletion_order:  "{{ stack_deletion_order_ecs }}"
              ass:cfn:deletion-order:  "{{ stack_deletion_order_ecs }}"
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}ECS" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}ECS{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}ECS --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]

      when: "ecs is defined"
      tags: [ 'ecs' ]

    - name: ECS2 Cluster
      block:
        - name: Create CFN template from Ansible template for the ECS2 Cluster
          template:
            src: ECS2.yml
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecs2.yml"
        - name: Check generated ECS2 Cluster CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecs2.yml"
        - name: Put CFN template for ECS2 on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecs2.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-ecs2.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the ECS2 template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-ecs2.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the ECS2 CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}ECS2"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}ECS2{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              stack_deletion_order:  "{{ stack_deletion_order_ecs2 }}"
              ass:cfn:deletion-order:  "{{ stack_deletion_order_ecs2 }}"
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}ECS2" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}ECS2{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}ECS2 --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]

      when: "ecs2 is defined and loadbalancers2 is defined"
      tags: [ 'ecs2' ]

    - name: WAF Associations
      block:
        - name: Create CFN template from Ansible template for the WAF Associations
          template:
            src: WAFAssociations.yml
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-waf-associations.yml"
        - name: Check generated WAF Associations CloudFormation file against linter.
          shell: |
            cfn-lint --ignore-checks={{ cfn_lint_ignore_list }} "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-waf-associations.yml"
        - name: "Put CFN template for WAF associations on s3"
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-waf-associations.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-waf-associations.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-waf-associations.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the WAF associations stack
          cloudformation:
            stack_name: "{{ cfn_project }}WAFAssociations"
            create_changeset: "{{ create_changeset }}"
            changeset_name: "{{ cfn_project }}WAFAssociations{{ changeset_suffix }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              aws_cfn_gen_tag: "{{ gittag }}"
          tags: [ 'deploy' ]
        - name: Add result of changeset to a local file
          shell: |
            echo "{{ cfn_project }}WAFAssociations" >> changeset_report.txt
            aws cloudformation describe-change-set \
                --change-set-name={{ cfn_project }}WAFAssociations{{ changeset_suffix }} \
                --stack-name={{ cfn_project }}WAFAssociations --query 'Changes[*].ResourceChange.[Action,LogicalResourceId,Replacement]' \
                --output text >> changeset_report.txt
          when: "create_changeset is defined and create_changeset == 'yes'"
          tags: [ 'deploy' ]

      when: "waf_associations is defined"
      tags: [ 'waf_associations' ]