---
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Create ECS Container Registries and a ecr-push user (aws-cfn-gen version: {{ gittag | default('na') }})

Resources:
{% for repo in ecr.repositories | default([]) %}
  {{ repo.cfn_name }}:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "{{ repo.name }}"
{%   if repo.scanonpush is defined %}
      ImageScanningConfiguration:
        ScanOnPush: true
{%   endif %}
{%   if repo.cross_account_access is defined and repo.cross_account_access.pull is defined %}
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          -
            Sid: AllowPull
            Effect: Allow
            Principal:
              AWS:
{%     for account_id in repo.cross_account_access.pull %}
                - "arn:aws:iam::{{ account_id }}:root"
{%     endfor %}
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:GetAuthorizationToken"
{%   endif %}
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
              "rules": [{
                  "rulePriority": 1,
                  "description": "Expire images older than 14 days",
                  "selection": {
                      "tagStatus": "untagged",
                      "countType": "sinceImagePushed",
                      "countUnit": "days",
                      "countNumber": 14
                  },
                  "action": {
                      "type": "expire"
                  }
              }]
          }
{% endfor %}

  ECRPushPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ECRPushPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - iam:PassRole
            Effect: Allow
            Resource:
              - 'arn:aws:iam::{{ target_account.account_id }}:role/ECSTaskRole*'
              - 'arn:aws:iam::{{ target_account.account_id }}:role/ECSExecutionRole'
              - 'arn:aws:iam::{{ target_account.account_id }}:role/ECSExecutionRole*'
              - 'arn:aws:iam::{{ target_account.account_id }}:role/CwEvent*'
          - Action:
              - events:ListRules
              - events:ListTargetsByRule
              - events:PutTargets
              - events:DescribeRule
              - events:PutEvents
            Effect: Allow
            Resource: '*'
          - Action:
              - ecs:UpdateService
              - ecs:ListServices
              - ecs:DescribeServices
            Effect: Allow
            Resource: '*'
          - Action:
              - cloudwatch:DescribeAlarms
              - cloudwatch:DisableAarmActions
              - cloudwatch:EnableAlarmActions
            Effect: Allow
            Resource: '*'
          - Action:
              - ecs:ListTaskDefinitionFamilies
              - ecs:RegisterTaskDefinition
              - ecs:ListTaskDefinitions
              - ecs:DescribeTaskDefinition
            Effect: Allow
            Resource: '*'
      Groups:
        - !Ref ECRPushGroup

  ECRPushGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: ECRPushGroup

  ECRPush:
    Type: AWS::IAM::User
    Properties:
      UserName: ecr-push
      Groups:
        - !Ref ECRPushGroup

  ECRPullGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: ECRPullGroup
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  ECRPull:
    Type: AWS::IAM::User
    Properties:
      UserName: ecr-pull
      Groups:
        - !Ref ECRPullGroup

  KeyECRPush:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        !Ref ECRPush
{%       if iam_accesskey_serial is defined %}
      Serial: {{ iam_accesskey_serial }}
{%       endif %}

  KeyECRPull:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        !Ref ECRPull
{%       if iam_accesskey_serial is defined %}
      Serial: {{ iam_accesskey_serial }}
{%       endif %}

Outputs:
  AccessKeyECRPush:
    Value:
      !Ref KeyECRPush
  SecretKeyECRPush:
    Value: !GetAtt KeyECRPush.SecretAccessKey
  AccessKeyECRPull:
    Value:
      !Ref KeyECRPull
  SecretKeyECRPull:
    Value: !GetAtt KeyECRPull.SecretAccessKey
